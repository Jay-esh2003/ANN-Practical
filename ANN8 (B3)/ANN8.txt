# Title: Implement Artificial Neural Network training process in Python
# Using Forward Propagation and Back Propagation (inspired by Sivanandam's example)

import numpy as np

# Define the sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Input and expected output (example)
inputs = np.array([[0, 1]])  # Reshaped to 2D for dot product compatibility
expected_output = np.array([[1]])

# Hyperparameters
epochs = 5
lr = 0.25
inputLayerNeurons, hiddenLayerNeurons, outputLayerNeurons = 2, 2, 1

# Weight and bias initialization
hidden_weights = np.random.uniform(size=(inputLayerNeurons, hiddenLayerNeurons))
hidden_bias = np.random.uniform(size=(1, hiddenLayerNeurons))
output_weights = np.random.uniform(size=(hiddenLayerNeurons, outputLayerNeurons))
output_bias = np.random.uniform(size=(1, outputLayerNeurons))

# Training process
for _ in range(epochs):
    # Forward Propagation
    hidden_layer_input = np.dot(inputs, hidden_weights) + hidden_bias
    hidden_layer_output = sigmoid(hidden_layer_input)

    output_layer_input = np.dot(hidden_layer_output, output_weights) + output_bias
    predicted_output = sigmoid(output_layer_input)

    # Backpropagation
    error = expected_output - predicted_output
    d_predicted_output = error * sigmoid_derivative(predicted_output)

    error_hidden_layer = d_predicted_output.dot(output_weights.T)
    d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

    # Updating Weights and Biases
    output_weights += hidden_layer_output.T.dot(d_predicted_output) * lr
    output_bias += np.sum(d_predicted_output, axis=0, keepdims=True) * lr
    hidden_weights += inputs.T.dot(d_hidden_layer) * lr
    hidden_bias += np.sum(d_hidden_layer, axis=0, keepdims=True) * lr

# Final results
print("Final hidden weights: ", *hidden_weights)
print("Final hidden bias: ", *hidden_bias)
print("Final output weights: ", *output_weights)
print("Final output bias: ", *output_bias)
print("\nOutput from neural network after training: ", *predicted_output)
